name: Deploy brg to cloudfront

on:
    release:
        types: [published]

jobs:
    build:
        runs-on: ubuntu-18.04
        steps:
            - name: Checkout source code. # 레포지토리 체크아웃
              uses: actions/checkout@v1

            - name: Cache node modules # node modules 캐싱
              uses: actions/cache@v1
              with:
                  path: node_modules
                  key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.OS }}-build-
                      ${{ runner.OS }}-
            - name: Install Dependencies # 의존 파일 설치
              run: npm install

            - name: ALL_Build # React Build
              run: |
                  CI= npm run build:taiwan
                  CI= npm run build
              if: startsWith(github.event.release.name, '[ALL]')

            - name: KR_Build # React Build
              run: CI= npm run build
              if: startsWith(github.event.release.name, '[KR]')

            - name: TW_Build # React Build
              run: CI= npm run build:taiwan
              if: startsWith(github.event.release.name, '[TW]')

            - name: Archive production artifacts # upload file
              uses: actions/upload-artifact@v3
              with:
                  name: build # artifact name
                  path: |
                      build_tw
                      build
    deploy_ALL:
        needs: build
        runs-on: ubuntu-18.04
        steps:
            - name: Download production artifacts # download file
              uses: actions/download-artifact@v1
              with:
                  name: build
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLOUDFRONT_S3 }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLOUDFRONT_S3 }}
                  aws-region: ${{ secrets.AWS_REGION }}
                  mask-aws-account-id: true
            - name: Push Contents to S3
              run: aws s3 sync build/build s3://${{ secrets.S3_BUCKET_NAME }}
            - name: Invalidate CloudFront Cache
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_DISTRIBUTION_ID }} --paths "/*"
            - name: Push Contents to S3
              run: aws s3 sync build/build_tw s3://${{ secrets.TW_S3_BUCKET_NAME }}
            - name: Invalidate CloudFront Cache
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.TW_CDN_DISTRIBUTION_ID }} --paths "/*"
        if: startsWith(github.event.release.name, '[ALL]')

    deploy_KR:
        needs: build
        runs-on: ubuntu-18.04
        steps:
            - name: Download production artifacts # download file
              uses: actions/download-artifact@v1
              with:
                  name: build
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLOUDFRONT_S3 }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLOUDFRONT_S3 }}
                  aws-region: ${{ secrets.AWS_REGION }}
                  mask-aws-account-id: true
            - name: Push Contents to S3
              run: aws s3 sync build/build s3://${{ secrets.S3_BUCKET_NAME }}
            - name: Invalidate CloudFront Cache
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CDN_DISTRIBUTION_ID }} --paths "/*"
        if: startsWith(github.event.release.name, '[KR]')

    deploy_TW:
        needs: build
        runs-on: ubuntu-18.04
        steps:
            - name: Download production artifacts # download file
              uses: actions/download-artifact@v1
              with:
                  name: build # artifact name
            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_CLOUDFRONT_S3 }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_CLOUDFRONT_S3 }}
                  aws-region: ${{ secrets.AWS_REGION }}
                  mask-aws-account-id: true
            - name: Push Contents to S3
              run: aws s3 sync build/build_tw s3://${{ secrets.TW_S3_BUCKET_NAME }}
            - name: Invalidate CloudFront Cache
              run: aws cloudfront create-invalidation --distribution-id ${{ secrets.TW_CDN_DISTRIBUTION_ID }} --paths "/*"
        if: startsWith(github.event.release.name, '[TW]')